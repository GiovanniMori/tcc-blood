datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = "" // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = false // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

enum UserRole {
  ADMIN
  MOD
  USER
  SPONSOR
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

model Hemocenter {
  id          String        @id @default(uuid())
  name        String
  address     String
  appointment Appointment[]
}

model Appointment {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @map("user_id")
  hemocenter   Hemocenter @relation(fields: [hemocenterId], references: [id])
  hemocenterId String     @map("hemocenter_id")
  date         DateTime

  @@index([hemocenterId])
  @@index([userId])
}

model User {
  id               String        @unique
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @map("updated_at")
  email            String        @unique
  name             String        @db.VarChar(255)
  points           Int           @default(0)
  role             UserRole      @default(USER)
  gender           Gender
  lastDonationDate DateTime?     @map("last_donation_date")
  bloodType        BloodType     @default(UKNOWN) @map("blood_type")
  cpf              String        @unique
  appointments     Appointment[]
  Voucher          Voucher[]
}

model Reward {
  id          String    @id @default(uuid())
  name        String
  description String
  imageUrl    String
  points      Int
  Voucher     Voucher[]
}

model Voucher {
  id          String   @id @default(uuid())
  code        String   @unique
  generatedAt DateTime @default(now()) @map("generated_at")
  user        User?    @relation(fields: [reedemedBy], references: [id])
  reedemedBy  String?  @map("reedemed_by")
  Reward      Reward   @relation(fields: [rewardId], references: [id])
  rewardId    String   @map("reward_id")

  @@index([rewardId])
  @@index([reedemedBy])
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  UKNOWN
}

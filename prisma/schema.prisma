datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

enum UserRole {
  ADMIN
  MOD
}

enum Gender {
  MALE
  FEMALE
}

model Hemocenter {
  id              String           @id @default(uuid())
  name            String
  address         String
  startHour       DateTime         @map("start_hour")
  endHour         DateTime         @map("end_hour")
  interval        Int
  maxCapacity     Int              @map("max_capacity")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  appointment     Appointment[]
  workers         User[]
  bloodTypeStocks BloodTypeStock[]
}

model BloodTypeStock {
  id           String     @id @default(uuid())
  hemocenter   Hemocenter @relation(fields: [hemocenterId], references: [id])
  hemocenterId String
  bloodType    BloodType  @map("blood_type")
  percentage   Float

  @@index([hemocenterId])
}

model Appointment {
  id           String     @id @default(uuid())
  hemocenter   Hemocenter @relation(fields: [hemocenterId], references: [id])
  hemocenterId String     @map("hemocenter_id")
  date         DateTime
  Donor        Donor?     @relation(fields: [donorUserId], references: [id])
  donorUserId  String?

  @@index([donorUserId])
  @@index([hemocenterId])
}

model User {
  id           String      @id @unique
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @map("updated_at")
  email        String      @unique
  name         String      @db.VarChar(255)
  role         UserRole    @default(ADMIN)
  Sponsor      Sponsor?
  Donor        Donor?
  Hemocenter   Hemocenter? @relation(fields: [hemocenterId], references: [id])
  hemocenterId String?

  @@index([hemocenterId])
}

model Donor {
  id               String        @id @map("id")
  nickname         String        @unique
  lastDonationDate DateTime?     @map("last_donation_date")
  cpf              String        @unique
  points           Int           @default(0)
  bloodType        BloodType?    @map("blood_type")
  user             User          @relation(fields: [id], references: [id], onDelete: Cascade)
  referralBy       String?       @map("referral_by")
  gender           Gender
  birthDate        DateTime?     @map("birth_date")
  appointments     Appointment[]
  Voucher          Voucher[]
  followers        Follows[]     @relation("following")
  following        Follows[]     @relation("follower")
  Mission          Mission[]

  @@index([id])
}

model Follows {
  follower    Donor  @relation("follower", fields: [followerId], references: [id])
  followerId  String @map("follower_id")
  following   Donor  @relation("following", fields: [followingId], references: [id])
  followingId String @map("following_id")

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Mission {
  id          String   @id @default(uuid())
  name        String
  description String
  progress    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  donor       Donor[]
}

model Sponsor {
  name      String
  email     String    @unique
  id        String    @id
  user      User      @relation(fields: [id], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  Voucher   Voucher[]

  @@index([id])
}

model Reward {
  id          String    @id @default(uuid())
  name        String
  description String
  imageUrl    String
  points      Int
  Voucher     Voucher[]
}

model Voucher {
  id          String   @id @default(uuid())
  code        String   @unique
  generatedAt DateTime @default(now()) @map("generated_at")
  donor       Donor?   @relation(fields: [reedemedBy], references: [id])
  reedemedBy  String?  @map("reedemed_by")
  Reward      Reward   @relation(fields: [rewardId], references: [id])
  rewardId    String   @map("reward_id")
  Sponsor     Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId   String   @map("sponsor_id")

  @@index([sponsorId])
  @@index([rewardId])
  @@index([reedemedBy])
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
}
